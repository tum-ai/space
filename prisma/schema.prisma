generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  ok                Boolean
  state             String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  emailVerified         DateTime?
  name                  String?
  image                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  roles                 SpaceRole[]            @default([USER])
  accounts              Account[]
  departmentMemberships DepartmentMembership[]
  key                   Key[]
  profile               Profile[]
  reviews               Review[]
  session               Session[]
  opportunityAdmin      Opportunity[]          @relation("OpportunityToUser")
  questionnaires        Questionnaire[]        @relation("QuestionnaireToUser")
}

model Profile {
  id               Int       @id @default(autoincrement())
  birthday         DateTime?
  nationality      String?
  description      String?
  activityStatus   String
  degreeLevel      String?
  degreeName       String?
  degreeSemester   Int?
  degreeLastUpdate DateTime?
  university       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           String
  contacts         Contact[]
  user             User      @relation(fields: [userId], references: [id])
}

model Contact {
  id        Int         @id @default(autoincrement())
  profileId Int
  type      ContactType
  username  String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   Profile     @relation(fields: [profileId], references: [id])
}

model Department {
  id                    Int                    @id @default(autoincrement())
  name                  String
  creationDate          DateTime               @default(now())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  departmentMemberships DepartmentMembership[]
}

model DepartmentMembership {
  id              Int            @id @default(autoincrement())
  userId          String?
  departmentId    Int?
  membershipStart DateTime
  membershipEnd   DateTime?
  role            DepartmentRole
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  department      Department?    @relation(fields: [departmentId], references: [id])
  user            User?          @relation(fields: [userId], references: [id])
}

model Opportunity {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  start        DateTime
  end          DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tallySchema  Json?
  applications Application[]
  phases       Phase[]
  admins       User[]        @relation("OpportunityToUser")
}

model Phase {
  id             String          @id @default(uuid())
  order          Int
  isInterview    Boolean         @default(false)
  name           String
  opportunityId  Int
  opportunity    Opportunity     @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  questionnaires Questionnaire[]
}

model Questionnaire {
  id              String        @id @default(uuid())
  requiredReviews Int
  name            String
  conditions      Json?         @default("[]")
  questions       Json
  phaseId         String
  phase           Phase         @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  reviews         Review[]
  applications    Application[] @relation("ApplicationToQuestionnaire")
  reviewers       User[]        @relation("QuestionnaireToUser")
}

model Application {
  id             Int             @id @default(autoincrement())
  name           String?
  content        Json
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  opportunityId  Int
  opportunity    Opportunity     @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  reviews        Review[]
  questionnaires Questionnaire[] @relation("ApplicationToQuestionnaire")
}

model Review {
  id              Int           @id @default(autoincrement())
  content         Json
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String        @map("assigneeId")
  applicationId   Int           @map("reviewId")
  questionnaireId String
  status          ReviewStatus
  user            User          @relation(fields: [userId], references: [id])
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  application     Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([applicationId, userId, questionnaireId])
}

model Key {
  id        Int      @id @default(autoincrement())
  log       Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

enum SpaceRole {
  ADMIN
  USER
}

enum ContactType {
  EMAIL
  SLACK
  GITHUB
  INSTAGRAM
  PHONE
  LINKEDIN
  FACEBOOK
}

enum DepartmentRole {
  PRESIDENT
  HEAD_OF_DEPARTMENT
  BOARD_MEMBER
  ADVISOR
  TASKFORCE_LEAD
  PROJECT_LEAD
  ACTIVE_MEMBER
  ALUMNI
}

enum ReviewStatus {
  CREATED
  IN_PROGRESS
  DONE
}
