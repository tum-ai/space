generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  ok                Boolean
  state             String
  accessToken       String?
  tokenType         String?
  idToken           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                       String                 @id @default(cuid())
  profileId                Int?                   @unique
  email                    String                 @unique
  password                 String?
  firstName                String?
  lastName                 String?
  image                    String?
  emailVerified            DateTime?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  accounts                 Account[]
  departmentMemberships    DepartmentMembership[]
  createdOpportunities     Opportunity[]
  opportunityParticipation UserOnOpportunity[]
  reviews                  Review[]
  profile                  Profile?               @relation(fields: [profileId], references: [id])
  role                     SpaceRole
}

model Profile {
  id               Int       @id @default(autoincrement())
  userId           String
  birthday         DateTime?
  nationality      String?
  description      String?
  activityStatus   String
  degreeLevel      String?
  degreeName       String?
  degreeSemester   Int?
  degreeLastUpdate DateTime?
  university       String?
  profilePicture   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  contacts         Contact[]
  user             User?
}

model Contact {
  id        Int         @id @default(autoincrement())
  profileId Int
  type      ContactType
  username  String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   Profile     @relation(fields: [profileId], references: [id])
}

model Department {
  id                    Int                    @id @default(autoincrement())
  name                  String
  creationDate          DateTime               @default(now())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  departmentMemberships DepartmentMembership[]
  opportunities         Opportunity[]
}

model DepartmentMembership {
  id                 Int                @id @default(autoincrement())
  userId             String?
  departmentId       Int?
  membershipStart    DateTime
  membershipEnd      DateTime?
  departmentPosition DepartmentPosition
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  department         Department?        @relation(fields: [departmentId], references: [id])
  user               User?              @relation(fields: [userId], references: [id])
}

model Opportunity {
  id               Int                 @id @default(autoincrement())
  creatorId        String?
  title            String
  description      String
  configuration    Json
  departmentId     Int
  opportunityStart DateTime
  opportunityEnd   DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  creator          User?               @relation(fields: [creatorId], references: [id])
  department       Department          @relation(fields: [departmentId], references: [id])
  users            UserOnOpportunity[]
  applications     Application[]
  tags             Tag[]
}

model UserOnOpportunity {
  userId          String
  opportunityId   Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  opportunity     Opportunity     @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityRole OpportunityRole
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, opportunityId], name: "userOnOpportunity")
}

model Application {
  id            Int                  @id @default(autoincrement())
  application   Json
  opportunityId Int
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  reviews       Review[]
  opportunity   Opportunity          @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  tags          TagsOnApplications[]
}

model Tag {
  id            Int                  @id @default(autoincrement())
  opportunityId Int
  tallyLabel    String
  name          String
  applications  TagsOnApplications[]
  opportunity   Opportunity          @relation(fields: [opportunityId], references: [id])

  @@unique([opportunityId, name])
}

model TagsOnApplications {
  id            Int         @id @default(autoincrement())
  tagId         Int
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id])
  tag           Tag         @relation(fields: [tagId], references: [id])

  @@unique([tagId, applicationId])
}

model Review {
  phase      String
  reviewId   Int
  assigneeId String
  content    Json
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  assignee   User        @relation(fields: [assigneeId], references: [id])
  review     Application @relation(fields: [reviewId], references: [id])

  @@id([phase, reviewId], name: "id")
}

enum SpaceRole {
  ADMIN
  USER
}

enum OpportunityRole {
  OWNER
  SCREENER
}

enum ContactType {
  EMAIL
  SLACK
  GITHUB
  FACEBOOK
  INSTAGRAM
  PHONE
}

enum DepartmentPosition {
  PRESIDENT
  HEAD_OF_DEPARTMENT
  BOARD_MEMBER
  ADVISOR
  TASKFORCE_LEAD
  PROJECT_LEAD
  ACTIVE_MEMBER
  ALUMNI
}
