generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  ok                Boolean
  state             String
  accessToken       String?  @db.Text
  tokenType         String?
  idToken           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                       String                     @id @default(cuid())
  profileId                Int?                       @unique
  profile                  Profile?                   @relation(fields: [profileId], references: [id])
  email                    String                     @unique
  password                 String?
  firstName                String?
  lastName                 String?
  image                    String?           
  userToUserRoles          UserToUserRole[]
  departmentMemberships    DepartmentMembership[]
  createdOpportunities     Opportunity[]
  opportunityParticipation OpportunityParticipation[]
  reviews                  Review[]
  emailVerified            DateTime?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  accounts                 Account[]
}

model UserRole {
  name            String           @id   
  userToUserRoles UserToUserRole[]
  userPermissions UserPermission[] 
}

model UserToUserRole { 
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete : Cascade)
  role   UserRole   @relation(fields: [roleId], references: [name], onDelete : Cascade)

  @@id(name: "userToUserRoleId", [userId, roleId])
  @@index([userId])
}

model UserPermission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  role        String
  userRole    UserRole @relation(fields: [role], references: [name], onDelete: Cascade)
}

model Profile {
  id               Int       @id @default(autoincrement())
  userId           Int
  user             User?
  birthday         DateTime?
  nationality      String?
  description      String?
  activityStatus   String
  degreeLevel      String?
  degreeName       String?
  degreeSemester   Int?
  degreeLastUpdate DateTime?
  university       String?
  profilePicture   String?
  contacts         Contact[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Contact {
  id        Int         @id @default(autoincrement())
  profileId Int
  profile   Profile     @relation(fields: [profileId], references: [id])
  type      ContactType
  username  String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum ContactType {
  EMAIL
  SLACK
  GITHUB
  FACEBOOK
  INSTAGRAM
  PHONE
}

model Department {
  id                    Int                    @id @default(autoincrement())
  name                  String
  type                  DepartmentType
  creationDate          DateTime               @default(now())
  departmentMemberships DepartmentMembership[]
  opportunities         Opportunity[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

enum DepartmentType {
  FUNCTIONAL
  MISSION_BASED
}

model DepartmentMembership {
  id                 Int                @id @default(autoincrement())
  userId             String?
  user               User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  departmentId       Int?
  department         Department?        @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  membershipStart    DateTime
  membershipEnd      DateTime?
  departmentPosition DepartmentPosition
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

enum DepartmentPosition {
  PRESIDENT
  HEAD_OF_DEPARTMENT
  BOARD_MEMBER
  ADVISOR
  TASKFORCE_LEAD
  PROJECT_LEAD
  ACTIVE_MEMBER
  ALUMNI
}

model Opportunity {
  id                       Int                        @id @default(autoincrement())
  creatorId                String?
  creator                  User?                      @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  title                    String
  description              String
  departmentId             Int
  department               Department                 @relation(fields: [departmentId], references: [id])
  opportunityStart         DateTime
  opportunityEnd           DateTime?
  applications             Application[]
  reviews                  Review[]
  opportunityParticipation OpportunityParticipation[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

model OpportunityParticipation {
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunityId   Int
  opportunity     Opportunity     @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  role            String
  opportunityRole OpportunityRole @relation(fields: [role], references: [name])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@id(name: "opportunityParticipationId", [userId, opportunityId])
}

model OpportunityRole {
  name                      String                     @id
  opportunityParticipations OpportunityParticipation[]
  rolePermissions           OpportunityPermission[]
}

model OpportunityPermission {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  description     String
  role            String
  opportunityRole OpportunityRole @relation(fields: [role], references: [name], onDelete: Cascade)
}

model Application {
  id            Int         @id @default(autoincrement())
  opportunityId Int
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  content       Json
  reviews       Review[]
}

model Review {
  id            Int         @id @default(autoincrement())
  opportunityId Int
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  assigneeId    Int
  assignee      User        @relation(fields: [assigneeId], references: [profileId])
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id])
  reviewText    String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
